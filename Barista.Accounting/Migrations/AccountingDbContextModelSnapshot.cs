// <auto-generated />
using System;
using Barista.Accounting.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Barista.Accounting.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    partial class AccountingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Barista.Accounting.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("ExternalId");

                    b.Property<string>("Source");

                    b.Property<DateTimeOffset>("Updated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Barista.Accounting.Domain.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountingGroupId");

                    b.Property<Guid>("AuthenticationMeansId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<Guid>("OfferId");

                    b.Property<Guid>("PointOfSaleId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<DateTimeOffset>("Updated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountingGroupId");

                    b.HasIndex("PointOfSaleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Barista.Accounting.Domain.SaleStateChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CausedByPointOfSaleId");

                    b.Property<Guid?>("CausedByUserId");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("Reason");

                    b.Property<Guid>("SaleId");

                    b.Property<int>("State");

                    b.Property<DateTimeOffset>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleStateChange");
                });

            modelBuilder.Entity("Barista.Accounting.Domain.SaleStateChange", b =>
                {
                    b.HasOne("Barista.Accounting.Domain.Sale")
                        .WithMany("StateChanges")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
